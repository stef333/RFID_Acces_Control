/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef RFID_SM_H_
#define RFID_SM_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Rfid_sm state machine.
*/
typedef struct Rfid_sm Rfid_sm;

#ifdef __cplusplus
}
#endif

#include <rfid_main_sm.h>
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'rfid_sm'.
*/

#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define RFID_SM_STATE_COUNT 2

/*! Define dimension of the state configuration vector for orthogonal states. */
#define RFID_SM_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_RFID_SM_MAIN_REGION_RFID 0
#define SCVI_RFID_SM_MAIN_REGION_RFID_R1_INIT 0



/*! Enumeration of all states */ 
typedef enum
{
	Rfid_sm_last_state,
	Rfid_sm_main_region_rfid,
	Rfid_sm_main_region_rfid_r1_INIT
} Rfid_smStates;









/*! 
 * Type declaration of the data structure for the Rfid_sm state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Rfid_sm
{
	Rfid_smStates stateConfVector[RFID_SM_MAX_ORTHOGONAL_STATES];
	sc_boolean isExecuting;
};



/*! Initializes the Rfid_sm state machine data structures. Must be called before first usage.*/
extern void rfid_sm_init(Rfid_sm* handle);


/*! Activates the state machine. */
extern void rfid_sm_enter(Rfid_sm* handle);

/*! Deactivates the state machine. */
extern void rfid_sm_exit(Rfid_sm* handle);





/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean rfid_sm_is_active(const Rfid_sm* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean rfid_sm_is_final(const Rfid_sm* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean rfid_sm_is_state_active(const Rfid_sm* handle, Rfid_smStates state);


#ifdef __cplusplus
}
#endif 

#endif /* RFID_SM_H_ */
